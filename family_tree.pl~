:- use_module(library(dcg/basics)).

:- dynamic male/1.
:- dynamic female/1.
:- dynamic parent/2.

% First generation males
male(eric).
male(john).
male(daniel).
male(rafael).
% Second generation males
male(robert).
male(miguel).
male(gabriel).
% Third generation males
male(josh).
male(joseph).

% First generation females
female(sofia).
female(mary).
female(amber).
female(jane).
% Second generation females
female(linda).
female(bianca).
female(emily).
% Third generation females
female(mia).
female(bea).
female(camille).
female(lia).

% Parental relationships
parent(eric, linda).
parent(sofia, linda).

parent(john, robert).
parent(mary, robert).

parent(john, miguel).
parent(mary, miguel).

parent(jane, bianca).
parent(rafael, bianca).

parent(john, emily).
parent(mary, emily).

parent(daniel, gabriel).
parent(amber, gabriel).

parent(linda, josh).
parent(robert, josh).

parent(linda, mia).
parent(robert, mia).

parent(linda, bea).
parent(robert, bea).

parent(miguel, joseph).
parent(bianca, joseph).

parent(emily, camille).
parent(gabriel, camille).

parent(emily, lia).
parent(gabriel, lia).





% Check if two individuals are siblings (testing)
sibling_check(X, Y) :-
    parent(A, X),
    parent(A, Y),
    X \= Y.



% Adds siblings if person being connected too has parents
sibling_function(X, Y) :-
    findall(A, parent(A, Y), Parents),
    Parents \= [],not(male(X)),not(female(Y)) ->
        (
            assertz(male(X)),
            forall(
                member(A, Parents),
                assertz(parent(A, X))
            ),
            format('~w has been added as a sibling of ~w. Parents are ~w.~n', [X,Y,Parents])
        );
        write('Not feasible'), nl.

% Adds a sister if person being connected too has parents
sister_function(X,Y):-
    findall(A, parent(A, Y), Parents),
    Parents \= [],not(female(Y)) ->
        (
            assertz(female(X)),
            forall(
                member(A, Parents),
                assertz(parent(A, X))
            ),
            format('~w has been added as a sister of ~w. Parents are ~w.~n', [X,Y,Parents])
        );
        write('Not feasible'), nl.

%Adds a brother if person being connected too has parents
brother_function(X,Y):-
    findall(A, parent(A, Y), Parents),
    Parents \= [],not(male(X)) ->
        (
            assertz(male(X)),
            forall(
                member(A, Parents),
                assertz(parent(A, X))
            ),
            format('~w has been added as a brother of ~w. Parents are ~w.~n', [X,Y,Parents])
        );
        write('Not feasible'), nl.

%Adds a mother if the person being connected too doesn't have one.
mother_function(X,Y):-
       \+ (parent(A, Y), female(A)) ->
        (
            assertz(female(X)),
            assertz(parent(X,Y)),
            format('~w has been added as a mother of ~w. ~n', [X,Y])
        );
        write('Not feasible'), nl.

%Adds a father if the person being connected too doesn't have one.
father_function(X,Y):-
       \+ (parent(A, Y), male(A)) ->
        (
            assertz(male(X)),
            assertz(parent(X,Y)),
            format('~w has been added as a father of ~w. ~n', [X,Y])
        );
        write('Not feasible'), nl.

children_function(X, Y, Z, C) :-
    assertz(male(X)),
    assertz(male(Y)),
    assertz(male(Z)),
    assertz(parent(C,X)),
    assertz(parent(C,Y)),
    assertz(parent(C,Z)),
    format('~w ~w ~w has been added as children of ~w. ~n', [X,Y,Z,C]).

% Adds a mother and father if the person doesn't have both (mother
% first, then father, then child).
parents_function(X,Y,Z):-
    (\+ parent(_, Z)) ->
        (
            assertz(female(X)),
            assertz(parent(X,Z)),
            assertz(male(Y)),
            assertz(parent(Y,Z)),
            format('~w and ~w has been added as parents of ~w. ~n', [X,Y,Z])
        );
        write('Not feasible'), nl.

%Adds a grandfather on the father's side if the person doesn't have one.
grandfather_function(X,Y):-
    parent(A,Y),male(A),\+ (parent(B,A),male(B)) ->
        (
            assertz(male(X)),
            assertz(parent(X,A)),
            format('~w has been added as the grandfather of ~w. ~n', [X,Y])
        );
        write('Not feasible'), nl.

%Adds a grandmother on the father's side if the person doesn't have one.
grandmother_function(X,Y):-
    parent(A,Y),male(A),\+ (parent(B,A),female(B)) ->
        (
            assertz(female(X)),
            assertz(parent(X,A)),
            format('~w has been added as the grandmother of ~w. ~n', [X,Y])
        );
        write('Not feasible'), nl.

%Adds a child to a person.
child_function(X,Y):-
    assertz(male(X)),
    assertz(parent(Y,X)).

%Adds a son to a person.
son_function(X,Y):-
    assertz(male(X)),
    assertz(parent(Y,X)).

%Adds a daughter to a person.
daughter_function(X,Y):-
    assertz(female(X)),
    assertz(parent(Y,X)).

%Adds an uncle to a person if that person has grandparents.
uncle_function(X,Y):-
    parent(Parent, Y),
    findall(GP, parent(GP, Parent), Grandparents),
    Grandparents \= []->
    (
    forall(
        member(GP, Grandparents),
        assertz(parent(GP, X))
    ),
    assertz(male(X)),
    format('~w has been added as the uncle of ~w. ~n', [X,Y])
    );
    write('Not feasible'), nl.


%Adds an aunt to a person if that person has grandparents.
aunt_function(X,Y):-
    parent(Parent, Y),
    findall(GP, parent(GP, Parent), Grandparents),
    Grandparents \= []->
    (
    forall(
        member(GP, Grandparents),
        assertz(parent(GP, X))
    ),
    assertz(female(X)),
    format('~w has been added as the aunt of ~w. ~n', [X,Y])
    );
    write('Not feasible'), nl.



% Sentence for "X and Y are siblings"
sentence(sibling_function(X, Y)) -->
    input(X), " and ", input(Y), " are siblings.".

% Sentence for "X is a brother of Y"
sentence(brother_function(X, Y)) -->
    input(X), " is a brother of ", input(Y),".".

% Sentence for "X is a sister of Y"
sentence(sister_function(X, Y)) -->
    input(X), " is a sister of ", input(Y),".".

% Sentence for "X is the father of Y"
sentence(father_function(X, Y)) -->
    input(X), " is the father of ", input(Y),".".

% Sentence for "X is the mother of Y"
sentence(mother_function(X, Y)) -->
    input(X), " is the mother of ", input(Y),".".

sentence(children_function(X, Y, Z, C)) -->
    input(X), " ", input(Y), " and ", input(Z), " are children of ", input(C), ".".
sentence(parents_function(X, Y, Z)) -->
    input(X), " and ", input(Y), " are the parents of ", input(Z),".".

sentence(grandfather_function(X, Y)) -->
    input(X), " is a grandfather of ", input(Y),".".

sentence(grandmother_function(X, Y)) -->
    input(X), " is a grandmother of ", input(Y),".".

sentence(child_function(X, Y)) -->
    input(X), " is a child of ", input(Y),".".

sentence(son_function(X, Y)) -->
    input(X), " is a son of ", input(Y),".".

sentence(daughter_function(X, Y)) -->
    input(X), " is a daughter of ", input(Y),".".





% Helper: Parse a name from input
input(Name) -->
    string(NameCodes), { atom_codes(Name, NameCodes) }.

% Main predicate: Parse and execute relationship statements
start :-
    write("Enter a relationship statement: "),
    read_line_to_string(user_input, Input),   % Read input from user
    string_codes(Input, Codes),
    (   phrase(sentence(Action), Codes)      % Parse input into an action
    ->  call(Action),                        % Call the parsed action
        write("Action executed: "), write(Action), nl
    ;   write("Error: Invalid input."), nl
    ).
